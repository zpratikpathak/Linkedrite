name: Deploy Docker Container

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Modify settings.py
      run: |
        sed -i "s/SECRET_KEY = .*/SECRET_KEY = '${{ secrets.SECRET_KEY }}'/g" Linkedrite/settings.py
        sed -i "s/DEBUG = os.getenv(\"Debug\")/DEBUG = False/g" Linkedrite/settings.py
        sed -i "s/ALLOWED_HOSTS = .*/ALLOWED_HOSTS = ['linkedrite.pratikpathak.com']/g" Linkedrite/settings.py

    - name: Create .env file
      run: echo "${{ secrets.ENVIRONMENTAL_VARIABLES }}" > .env

    - name: Build Docker image
      run: docker build . -t linkedrite:latest

    - name: Save Instance of Image
      run: docker save linkedrite:latest > linkedrite.tar

    - name: Remove old image file on server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          if [ -f "~/home/linkedrite.tar" ]; then
            rm -f ~/home/linkedrite.tar
          fi

          if [ ! -d "~/home" ]; then
            mkdir -p ~/home
          fi

    - name: Copy Docker image to server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT }}
        source: "linkedrite.tar"
        target: "~/home/"

    - name: Load Docker image and run container on server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |

          
          # Check if the container is running, stop and remove it if it is
          if [ $(docker ps -q -f name=linkedrite) ]; then
            docker stop linkedrite
            docker rm linkedrite
          # Check if the container exists (but is stopped), remove it if it does
          elif [ $(docker ps -aq -f status=exited -f name=linkedrite) ]; then
            docker rm linkedrite
          fi

          # Remove any existing image with the same name before loading a new one
          docker image inspect linkedrite:latest > /dev/null 2>&1 && docker image rm linkedrite:latest
          docker load < ~/home/linkedrite.tar          
          
          # Run the new container
          docker run -d --restart always --name linkedrite -p 8000:8000 linkedrite:latest

          # Remove the linkedrite.tar file after loading and running the container
          rm -f ~/home/linkedrite.tar